// Copyright 2024 The tk9.0-go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build none

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"os"
	"slices"
	"strings"

	tklib "modernc.org/libtk9.0/library"
)

const (
	header = `// Code generated by generator.go, DO NOT EDIT.

package tk9_0 // import "modernc.org/tk9.0"

`
)

type document map[string]any

func main() {
	return //TODO
	var docs []document
	if err := json.Unmarshal([]byte(tklib.API), &docs); err != nil {
		panic(err)
	}

	generated("generated.go", docs)
}

func generated(fn string, docs []document) {
	w := bytes.NewBuffer(nil)
	w.WriteString(header)
	if err := os.WriteFile(fn, w.Bytes(), 0660); err != nil {
		panic(err)
	}

	var a []string
	m := map[string]document{}
	for _, v := range docs {
		nm := v["Page"].(string)
		a = append(a, nm)
		m[nm] = v
	}
	slices.Sort(a)

	for _, nm0 := range a {
		doc := m[nm0]
		nm := export(nm0)
		if _, ok := doc["IsWindow"].(bool); ok {
			fmt.Fprintf(w, "\n\n// %v", doc["Name"])
			fmt.Fprintf(w, "\nfunc (w *Window) %s(opts ...Opt) (*Window, error) {", nm)
			fmt.Fprintf(w, "\n\treturn w.newChild(%q, opts...)", nm0)
			fmt.Fprintf(w, "\n}")

			fmt.Fprintf(w, "\n\n// %v", doc["Name"])
			fmt.Fprintf(w, "\nfunc %s(opts ...Opt) (*Window, error) {", nm)
			fmt.Fprintf(w, "\n\treturn tk.%s(opts...)", nm)
			fmt.Fprintf(w, "\n}")
		}
	}

	if err := os.WriteFile(fn, w.Bytes(), 0660); err != nil {
		panic(err)
	}
}

func export(s string) (r string) {
	a := strings.Split(s, "_")
	for i, v := range a {
		a[i] = strings.ToUpper(v[:1]) + v[1:]
	}
	return strings.Join(a, "")
}

// Copyright 2024 The tk9.0-go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build none

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"os"
	"slices"
	"strings"

	tklib "modernc.org/libtk9.0/library"
)

const (
	header = `// Code generated by generator.go, DO NOT EDIT.

package tk9_0 // import "modernc.org/tk9.0"

import (
	"fmt"
)

`
)

type document map[string]any

func main() {
	var docs []document
	if err := json.Unmarshal([]byte(tklib.API), &docs); err != nil {
		panic(err)
	}

	generated("generated.go", docs)
}

func generated(fn string, docs []document) {
	w := bytes.NewBuffer(nil)
	w.WriteString(header)
	if err := os.WriteFile(fn, w.Bytes(), 0660); err != nil {
		panic(err)
	}

	var a []string
	m := map[string]document{}
	for _, v := range docs {
		nm := v["Page"].(string)
		a = append(a, nm)
		m[nm] = v
	}
	slices.Sort(a)

	for _, nm0 := range a {
		doc := m[nm0]
		switch doc["Page"].(string) {
		case "options":
			for _, v := range doc["Options"].([]any) {
				v := v.(map[string]any)
				nm := v["Name"].(string)
				docs := v["Docs"].(string)
				option(w, nm, docs)
			}
		default:
			nm := tclName2GoName(nm0)
			if _, ok := doc["IsWindow"].(bool); ok {
				fmt.Fprintf(w, "\n\n// %v", doc["Name"])
				fmt.Fprintf(w, "\n//\n// The resulting Window is a child of 'w'.")
				fmt.Fprintf(w, "\nfunc (w *Window) %s(opts ...Opt) *Window {", nm)
				fmt.Fprintf(w, "\n\treturn w.newChild(%q, opts...)", nm0)
				fmt.Fprintf(w, "\n}")

				fmt.Fprintf(w, "\n\n// %v", doc["Name"])
				fmt.Fprintf(w, "\nfunc %s(opts ...Opt) *Window {", nm)
				fmt.Fprintf(w, "\n\treturn tk.%s(opts...)", nm)
				fmt.Fprintf(w, "\n}")
			}
		}
	}

	if err := os.WriteFile(fn, w.Bytes(), 0660); err != nil {
		panic(err)
	}
}

func option(w io.Writer, nm, docs string) {
	nm = strings.ReplaceAll(nm, `"`, "")
	a := strings.Fields(nm)
	x := 0
	for i, v := range a {
		if strings.HasPrefix(v, "-") && (i == 0 || a[i-1] == "or") {
			a[x] = v
			x++
		}
	}
	a = a[:x]
	typ := "string"
	switch {
	case strings.Contains(docs, " integer "):
		typ = "int"
	case strings.Contains(docs, " boolean "):
		typ = "bool"
	}
	for _, nm := range a {
		nm = nm[1:] // remove leading '-'
		fmt.Fprintf(w, "\n\ntype %sOpt %s", nm, typ)
		fmt.Fprintf(w, "\n\nfunc (o %sOpt) opt() string {", nm)
		switch typ {
		case "string":
			fmt.Fprintf(w, "\n\treturn fmt.Sprintf(`-%s %%s`, tclSafeString(string(o)))", nm)
		case "bool", "int":
			fmt.Fprintf(w, "\n\treturn fmt.Sprintf(`-%s %%v`, o)", nm)
		}
		fmt.Fprintf(w, "\n}")
		nm2 := nm
		if r := replaceOpt[nm]; r != "" {
			nm2 = r
		}
		d := strings.Split(strings.TrimSpace(docs), "\n")
		fmt.Fprintf(w, "\n\n// %s", strings.Join(d, "\n// "))
		fmt.Fprintf(w, "\n//\n// The above is the original [Tcl/Tk documentation].")
		fmt.Fprintf(w, "\n//\n// [Tcl/Tk documentation]: https://www.tcl.tk/man/tcl9.0/TkCmd/options.html#M-%s", nm)
		fmt.Fprintf(w, "\nfunc %s(value %s) Opt {", export(nm2), typ)
		fmt.Fprintf(w, "\n\treturn %sOpt(value)", nm)
		fmt.Fprintf(w, "\n}")
	}
}

var replaceOpt = map[string]string{
	"text": "txt",
}

func tclName2GoName(s string) string {
	switch {
	case strings.HasPrefix(s, "ttk_"):
		return "T" + export(s[len("ttk_"):])
	default:
		return export(s)
	}
}

func export(s string) (r string) {
	a := strings.Split(s, "_")
	for i, v := range a {
		a[i] = strings.ToUpper(v[:1]) + v[1:]
	}
	return strings.Join(a, "")
}
